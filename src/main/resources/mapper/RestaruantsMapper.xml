<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcc.rich.mapper.RestaurantsMapper">


    <select id="selectRestaurantsWithPage" resultType="com.kcc.rich.util.won.RestaurantRankDTO" parameterType="com.kcc.rich.util.Criteria">
        SELECT *
        FROM (
        SELECT t.*,
        NVL((
        SELECT TRUNC(AVG(rev.review_score), 1)
        FROM reservations r
        LEFT JOIN reviews rev ON r.reservation_id = rev.reservation_id
        WHERE r.restaurant_id = t.restaurant_id
        ), 0.0) AS res_avg,
        ROW_NUMBER() OVER (ORDER BY restaurant_id) AS row_num
        FROM restaurants t
        <where>
            1 = 1
            <if test="searchKeyword != null">
                <if test="searchKeyword.restaurant_district != null and searchKeyword.restaurant_district != ''">
                    AND restaurant_district = #{searchKeyword.restaurant_district}
                </if>
                <if test="searchKeyword.restaurant_type != null and searchKeyword.restaurant_type != ''">
                    AND restaurant_type = #{searchKeyword.restaurant_type}
                </if>
                <if test="searchKeyword.restaurant_name != null and searchKeyword.restaurant_name != ''">
                    AND restaurant_name LIKE '%' || #{searchKeyword.restaurant_name} || '%'
                </if>
            </if>
        </where>
        )
        WHERE row_num BETWEEN ((#{page} - 1) * #{contentPerPage} + 1) AND (#{page} * #{contentPerPage})
        ORDER BY restaurant_id
    </select>

<!--    <select id="selectRestaurantsWithPage" resultType="com.kcc.rich.util.won.RestaurantRankDTO" parameterType="com.kcc.rich.util.Criteria">-->
<!--        SELECT ttr.*-->
<!--        FROM(-->
<!--        SELECT rownum,t.*-->
<!--        FROM(-->
<!--        SELECT t.*,NVL((-->
<!--        SELECT TRUNC(AVG(rev.review_score), 1)-->
<!--        FROM reservations r-->
<!--        LEFT JOIN reviews rev ON r.reservation_id = rev.reservation_id-->
<!--        WHERE r.restaurant_id = t.restaurant_id-->
<!--        ),0.0) res_avg-->
<!--        FROM  restaurants t-->
<!--        <where>-->
<!--            rownum <![CDATA[<=]]> #{page} * #{contentPerPage}-->
<!--                        <if test="searchKeyword != null">-->
<!--                            <if test="searchKeyword.restaurant_district != null and searchKeyword.restaurant_district != ''">-->
<!--                                AND restaurant_district=#{searchKeyword.restaurant_district}-->
<!--                            </if>-->
<!--                            <if test="searchKeyword.restaurant_type != null and searchKeyword.restaurant_type != ''">-->
<!--                                AND restaurant_type=#{searchKeyword.restaurant_type}-->
<!--                            </if>-->
<!--                            <if test="searchKeyword.restaurant_name != null and searchKeyword.restaurant_name != ''">-->
<!--                                AND restaurant_name LIKE '%'||#{searchKeyword.restaurant_name}||'%'-->
<!--                            </if>-->
<!--                        </if>-->
<!--        </where>-->

<!--        ORDER BY restaurant_id-->
<!--        )t-->
<!--        )ttr-->
<!--        where rownum  <![CDATA[>]]> (#{page} - 1) * #{contentPerPage}-->
<!--    </select>-->




<!--    <select id="selectRestaurantsWithPage" resultType="RestaurantVO" parameterType="com.kcc.rich.util.Criteria">-->
<!--        SELECT trr.*-->
<!--        FROM (-->
<!--        SELECT rownum RNO, t.*-->
<!--        FROM (-->
<!--        SELECT *-->
<!--        FROM restaurants-->
<!--        <where>-->
<!--            <if test="searchKeyword != null">-->
<!--                <if test="searchKeyword.restaurant_district != null and searchKeyword.restaurant_district != ''">-->
<!--                    AND restaurant_district=#{searchKeyword.restaurant_district}-->
<!--                </if>-->
<!--                <if test="searchKeyword.restaurant_type != null and searchKeyword.restaurant_type != ''">-->
<!--                    AND restaurant_type=#{searchKeyword.restaurant_type}-->
<!--                </if>-->
<!--                <if test="searchKeyword.restaurant_name != null and searchKeyword.restaurant_name != ''">-->
<!--                    AND restaurant_name LIKE '%'||#{searchKeyword.restaurant_name}||'%'-->
<!--                </if>-->
<!--            </if>-->
<!--        </where>-->
<!--        ORDER BY restaurant_id-->
<!--        ) t-->
<!--        WHERE rownum <![CDATA[<=]]> #{page} * #{contentPerPage}-->
<!--        ) trr-->
<!--        WHERE rno <![CDATA[>]]> (#{page} - 1) * #{contentPerPage}-->
<!--    </select>-->

    <select id="selectRestaurantAll" resultType="int" parameterType="com.kcc.rich.util.Criteria">
        SELECT count(*)
        FROM restaurants
        <where>
            <if test="searchKeyword != null">
                <if test="searchKeyword.restaurant_district != null and !searchKeyword.restaurant_district.equals('')">
                    AND restaurant_district = #{searchKeyword.restaurant_district}</if>
                <if test="searchKeyword.restaurant_type != null and !searchKeyword.restaurant_type.equals('')">
                    AND restaurant_type = #{searchKeyword.restaurant_type}</if>
                <if test="searchKeyword.restaurant_name != null and !searchKeyword.restaurant_name.equals('')">
                    AND restaurant_name LIKE '%'||#{searchKeyword.restaurant_name}||'%'
                </if>
            </if>
        </where>
    </select>

    <insert id="insertRestaurants" parameterType="com.kcc.rich.util.won.RestaurantJsonDTO$ResInfo">

        <selectKey resultType="long" keyProperty="restaurant_id" order="BEFORE">
            select RESTAURANT_SEQ.nextval from dual
        </selectKey>
        INSERT INTO restaurants (
        RESTAURANT_ID,
        RESTAURANT_NAME,
        RESTAURANT_DISTRICT,
        RESTAURANT_TYPE,
        RESTAURANT_IMG,
        RESTAURANT_ADDRESS,
        RESTMENU_BOARD,
        RESTAURANT_PHONE,
        REST_RESERVPRICE
        ) VALUES (
        #{restaurant_id},
        #{resName},
        #{resDistrict},
        #{resType},
        '/resources/img/main/image85.png',
        #{resAddress},
        'example_menu.jpg',
        #{resPhone},
        10000
        )
    </insert>

    <insert id="insertResDetail" parameterType="com.kcc.rich.util.won.RestaurantJsonDTO$ResInfo">

        INSERT INTO res_details (
        RESTAURANT_ID,
        RESTAURANT_Y,
        RESTAURANT_X,
        WEEK_START,
        WEEK_END,
        WEEKEND_START,
        WEEKEND_END,
        DAYOFF
        ) VALUES (
        #{restaurant_id},
        #{restaurant_y},
        #{restaurant_x},
        '09:00',
        '18:00',
        '10:00',
        '17:00',
        'Sunday'
        )

    </insert>

    <insert id="insertMenus" parameterType="long">
        INSERT INTO menus (
         RESTAURANT_ID,
          MENU_NAME,
           MENU_IMG,
          MENU_PRICE,
          MENU_DETAIL
        ) VALUES (
         #{restaurant_id},
          'Kimchi Stew',
          'kimchi_stew.jpg',
           8500,
          'Spicy stew with kimchi and pork'
        )
    </insert>



    <select id="selectRestaurant" resultType="RestaurantHomeResponse">
        SELECT
        res.restaurant_id,
        res.restaurant_name,
        res.restaurant_type,
        res.restaurant_phone,
        res.restaurant_address,
        NVL(res.rest_oneline, '등록된 정보가 없습니다') AS rest_oneline,
        NVL(rev.review_avg, 0) AS review_avg,
        NVL(rev.review_total, 0) AS review_total,
        TO_CHAR(SYSDATE, 'DY') AS cur_day,
        CASE
        WHEN TO_CHAR(SYSDATE, 'D') IN ('1', '7') THEN rd.weekend_start
        ELSE rd.week_start
        END AS start_time,
        CASE
        WHEN TO_CHAR(SYSDATE, 'D') IN ('1', '7') THEN rd.weekend_end
        ELSE rd.week_end
        END AS end_time
        FROM
        restaurants res
        LEFT JOIN
        (SELECT
        rsv.restaurant_id,
        AVG(rvw.review_score) AS review_avg,
        COUNT(rvw.review_score) AS review_total
        FROM
        reviews rvw
        LEFT JOIN
        reservations rsv ON rvw.reservation_id = rsv.reservation_id
        WHERE
        rsv.restaurant_id = 1
        GROUP BY
        rsv.restaurant_id
        ) rev ON res.restaurant_id = rev.restaurant_id
        LEFT JOIN
        res_details rd ON res.restaurant_id = rd.restaurant_id
        WHERE
        res.restaurant_id = #{resId}
    </select>

    <select id="selectMenuList" resultType="MenuVO">
        SELECT menu_id, menu_name, menu_img, menu_price, menu_detail
        FROM menus
        WHERE restaurant_id =#{restaurant_id}
    </select>

    <select id="selectRestaurantMenuBoard" resultType="string">
        SELECT restmenu_board
        FROM restaurants
        WHERE restaurant_id =#{restaurant_id}
    </select>

    <select id="selectRestaurantReviewCount" resultType="ReviewCount">
        select  rev.review_score, count(*) review_cnt
        from reservations res, reviews rev
        where res.reservation_id = rev.reservation_id
        and res.restaurant_id = #{restaurant_id}
        group by rev.review_score
        order by rev.review_score DESC
    </select>

    <select id="selectRestaurantReviewAvg" resultType="RestaurantReviewResponse">
        SELECT rsv.restaurant_id AS restaurant_id, AVG(rvw.review_score) AS review_avg, COUNT(rvw.review_score) AS review_total
        FROM reviews rvw, reservations rsv
        WHERE rvw.reservation_id = rsv.reservation_id
        AND rsv.restaurant_id = #{restaurant_id}
        GROUP BY rsv.restaurant_id
    </select>

    <select id="selectRestaurantReview" resultType="ReviewVO">
        SELECT rev.review_date, rev.review_score, rev.review_create, rev.review_img, rev.review_content,
        mem.member_id, mem.member_nick, mem.member_img
        FROM reviews rev, members mem, reservations res
        WHERE rev.member_id = mem.member_id
        AND rev.reservation_id = res.reservation_id
        AND res.restaurant_id = #{restaurant_id}
    </select>

    <select id="selectRestaurantInfo" resultType="RestaurantInfoResponse">
        SELECT res.restaurant_id, det.rest_detailexpl, det.restaurant_x, det.restaurant_y, det.week_start, det.week_end, det.weekend_start, det.weekend_end, det.dayoff,
        res.restaurant_address, res.restaurant_phone
        FROM res_details det, restaurants res
        WHERE det.restaurant_id = res.restaurant_id
        AND res.restaurant_id = #{restaurant_id}
    </select>

</mapper>